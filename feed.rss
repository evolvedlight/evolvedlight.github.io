<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Steve@brown.bg</title>
        <link>https://brown.bg</link>
        <description>Steve's blog</description>
        <lastBuildDate>Fri, 22 Sep 2023 21:13:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <image>
            <title>Steve@brown.bg</title>
            <url>https://brown.bg/logo.webp</url>
            <link>https://brown.bg</link>
        </image>
        <copyright>Copyright (c) 2021-present, Steve Brown</copyright>
        <item>
            <title><![CDATA[Running MassTransit queues with KEDA]]></title>
            <link>https://brown.bg/posts/scaling-masstransit-jobs</link>
            <guid>https://brown.bg/posts/scaling-masstransit-jobs</guid>
            <pubDate>Mon, 04 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>We have an interesting challenge in some of our microservices - we run lots and lots of microservices, all using a relatively small amount of memory, but the usage patterns may be unusual.
All these microservices talk MassTransit - some also have external triggers, API endpoints or scheduled jobs.</p>
]]></description>
            <content:encoded><![CDATA[<h2 id="we-have-an-interesting-challenge-in-some-of-our-microservices-we-run-lots-and-lots-of-microservices-all-using-a-relatively-small-amount-of-memory-but-the-usage-patterns-may-be-unusual-all-these-microservices-talk-masstransit-some-also-have-external-triggers-api-endpoints-or-scheduled-jobs" tabindex="-1">We have an interesting challenge in some of our microservices - we run lots and lots of microservices, all using a relatively small amount of memory, but the usage patterns may be unusual.
All these microservices talk MassTransit - some also have external triggers, API endpoints or scheduled jobs. <a class="header-anchor" href="#we-have-an-interesting-challenge-in-some-of-our-microservices-we-run-lots-and-lots-of-microservices-all-using-a-relatively-small-amount-of-memory-but-the-usage-patterns-may-be-unusual-all-these-microservices-talk-masstransit-some-also-have-external-triggers-api-endpoints-or-scheduled-jobs" aria-label="Permalink to &quot;We have an interesting challenge in some of our microservices - we run lots and lots of microservices, all using a relatively small amount of memory, but the usage patterns may be unusual.
All these microservices talk MassTransit - some also have external triggers, API endpoints or scheduled jobs.&quot;">&ZeroWidthSpace;</a></h2>
<p>They run like this:</p>
<ul>
<li>Most are processing constantly lots of small messages. These are no problem.</li>
<li>Some process only a few messages a day, but we have to keep the service running all day. This is annoying.</li>
<li>Some process only a few messages per day, but those small messages take a lot of CPU and memory. For example they may need to deal with files in memory in formats that don't yet easily support iteratively processing the file. This is a big problem for us as the services need to be sized to handle these large requirement, but are actually only running for a few minutes a day with this load.</li>
</ul>
<p>This post will show one approach to fix the third problem. The same tooling (KEDA) can also be used to improve the other situations but that's for another blog post.
What we'll do to address the final problem is to use KEDA Job based scaling.</p>
<p>First, we have the publisher. This could be anything and in our example it's normally from a cron job. The send will look like this, all normal MassTransit code:</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">endpoint</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> app</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Services</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">GetRequiredService</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">IPublishEndpoint</span><span style="color: #89DDFF">&gt;();</span></span>
<span class="line"><span style="color: #A6ACCD">endpoint</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Publish</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ProcessVeryLargeFileTrigger</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">)</span></span></code></pre>
</div><p><code>ProcessVeryLargeFileTrigger</code> is defined in an assembly that both producer and consumer can use.</p>
<p>Now, we need an entrypoint that allows us to read one message from the MassTransit queue (rabbit is used here), give it to MassTransit, then exit.</p>
<p>First, our entrypoint needs to have a masstransit consumer, in memory.</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">#</span><span style="color: #676E95"> Setup </span></span>
<span class="line"><span style="color: #FFCB6B">HostApplicationBuilder</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">builder</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> Host</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">CreateApplicationBuilder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">builder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Services</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">AddMassTransit</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">x</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=&gt;</span></span>
<span class="line"><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    x</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">AddConsumer</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ProcessVeryLargeFileConsumer</span><span style="color: #89DDFF">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    x</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">UsingInMemory</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #A6ACCD">    x</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">AddConfigureEndpointsCallback</span><span style="color: #89DDFF">((</span><span style="color: #FFCB6B">_</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">cfg</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #676E95">        </span><span style="color: #89DDFF">#</span><span style="color: #676E95"> Optional, we like this format</span></span>
<span class="line"><span style="color: #A6ACCD">        cfg</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">UseRawJsonSerializer</span><span style="color: #89DDFF">(</span><span style="color: #FFCB6B">isDefault</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">});</span></span>
<span class="line"><span style="color: #89DDFF">});</span></span></code></pre>
</div><p>Next, we need to connect and bind to a rabbit queue:</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight has-diff" ><code><span class="line"><span style="color: #FFCB6B">ConnectionFactory</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">factory</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ConnectionFactory</span></span>
<span class="line"><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  UserName </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&lt;get this from appsettings&gt;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  Password </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&lt;get this from appsettings&gt;</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  VirtualHost </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  HostName </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">example.default</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">IConnection</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">conn</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> factory</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">CreateConnection</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #FFCB6B">IModel</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">channel</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> conn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">CreateModel</span><span style="color: #89DDFF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">#</span><span style="color: #676E95"> Your exchange and queues are likely different</span></span>
<span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">exchangeName</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">LongRunningJobs</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">queueName</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">LongRunningJobs</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">routingKey</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">LongRunningJobs</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">ExchangeDeclare</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">exchangeName</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> ExchangeType</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Direct</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">QueueDeclare</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">queueName</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null);</span></span>
<span class="line"><span style="color: #A6ACCD">channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">QueueBind</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">queueName</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> exchangeName</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> routingKey</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null);</span></span></code></pre>
</div><p>After this, we need to try and get a single message from Rabbit. If there's nothing here, we exit.</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">BasicGetResult</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">message</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">BasicGet</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">LongRunningJobs</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">message </span><span style="color: #89DDFF">==</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// No message to pickup</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>We can then build our normal app and inject the RabbitMQ message into it:</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">app</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> builder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Build</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #FFCB6B">await</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">StartAsync</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #F78C6C">using</span><span style="color: #A6ACCD"> var scope </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> app.Services.CreateScope()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ep</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> scope</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ServiceProvider</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">GetRequiredService</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">ProcessVeryLargeFileConsumer</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">SubmitOrderConsumer</span><span style="color: #89DDFF">&gt;&gt;();</span></span></code></pre>
</div><p>Next, inject the message:</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">try</span></span>
<span class="line"><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F78C6C">var</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">messageBytes</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> message</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Body</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">ToArray</span><span style="color: #89DDFF">()</span></span>
<span class="line"><span style="color: #A6ACCD">    var headers </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">BasicProperties</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Headers</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">AsReadOnly</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F78C6C">await</span><span style="color: #A6ACCD"> ep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Dispatch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Body</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">ToArray</span><span style="color: #89DDFF">(),</span><span style="color: #A6ACCD"> headers</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> CancellationToken</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">None</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #A6ACCD">    channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">BasicAck</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">DeliveryTag</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">BasicNack</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">DeliveryTag</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>Finally, we can cleanup:</p>
<div class="language-c#"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">channel</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Close</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #A6ACCD">conn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Close</span><span style="color: #89DDFF">();</span></span>
<span class="line"><span style="color: #FFCB6B">await</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">StopAsync</span><span style="color: #89DDFF">();</span></span></code></pre>
</div><p>Of course, this is just the basics, your real solution would include logging and some other error handling (poison messages and so on should be handled, otherwise it will continue processing bad messages over and over).</p>
<p>This post now assumes you can build this into a docker image and push it to a registry you use. For this example, we'll assume the image name is <code>example-long:latest</code></p>
<p>At this point, you have a working application that will pick up a single message, handle it, and finish. We need some way to trigger this to happen for each single message in the queue - for this comes KEDA.
First, you need a secret containing the RabbitMQ connection string:</p>
<div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F07178">apiVersion</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">v1</span></span>
<span class="line"><span style="color: #F07178">kind</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Secret</span></span>
<span class="line"><span style="color: #F07178">metadata</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda-rabbitmq-secret</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">namespace</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">limited</span></span>
<span class="line"><span style="color: #F07178">data</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">host</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">&gt;</span><span style="color: #C792EA">-</span></span>
<span class="line"><span style="color: #C3E88D">    &lt;your base 64 encoded connection string&gt;</span></span>
<span class="line"><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Opaque</span></span></code></pre>
</div><p>You need a trigger authentication:</p>
<div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F07178">apiVersion</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda.sh/v1alpha1</span></span>
<span class="line"><span style="color: #F07178">kind</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">TriggerAuthentication</span></span>
<span class="line"><span style="color: #F07178">metadata</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda-trigger-auth-rabbitmq-conn</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">namespace</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">limited</span></span>
<span class="line"><span style="color: #F07178">spec</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">secretTargetRef</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">parameter</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">host</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda-rabbitmq-secret</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">host</span></span></code></pre>
</div><p>And the important bit: you need a ScaledJob spec that runs your docker image</p>
<div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F07178">apiVersion</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda.sh/v1alpha1</span></span>
<span class="line"><span style="color: #F07178">kind</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">ScaledJob</span></span>
<span class="line"><span style="color: #F07178">metadata</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">rabbitmq-consumer</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">namespace</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">limited</span></span>
<span class="line"><span style="color: #F07178">spec</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">jobTargetRef</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">template</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">spec</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">containers</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">example-long</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #F07178">image</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">example-long:latest</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #F07178">imagePullPolicy</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Never</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">restartPolicy</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Never</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">backoffLimit</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">pollingInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">             </span><span style="color: #676E95; font-style: italic"># Optional. Default: 30 seconds</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">maxReplicaCount</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">30</span><span style="color: #A6ACCD">             </span><span style="color: #676E95; font-style: italic"># Optional. Default: 100</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">successfulJobsHistoryLimit</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">30</span><span style="color: #A6ACCD">   </span><span style="color: #676E95; font-style: italic"># Optional. Default: 100. How many completed jobs should be kept.</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">failedJobsHistoryLimit</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">20</span><span style="color: #A6ACCD">       </span><span style="color: #676E95; font-style: italic"># Optional. Default: 100. How many failed jobs should be kept.</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">triggers</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">rabbitmq</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">metadata</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">queueName</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">LongRunningJobs</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">queueLength</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">authenticationRef</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">keda-trigger-auth-rabbitmq-conn</span></span></code></pre>
</div><p>Now, when you put a message into the queue, it'll be processed as a MassTransit message in a Kubernetes Job, allowing you to run your normal worker pods with lower memory and CPU requirements.</p>
<p>You also have a few other benefits:</p>
<ul>
<li>Deploys of the service don't kill a long running job</li>
<li>Jobs can be scheduled on other nodes</li>
<li>Jobs can be scheduled as lower priority</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Creating Kerberos secured connections from Dotnet on Linux]]></title>
            <link>https://brown.bg/posts/dotnet-kerberos</link>
            <guid>https://brown.bg/posts/dotnet-kerberos</guid>
            <pubDate>Sat, 05 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>For the last few years at my workplace we've been using Kerberos authentication to connect to the on-prem SQL Server databases. On Windows this just worked like magic, as the services ran as a Windows domain user and so could connect to the database without any additional configuration. However, when moving to Kubernetes and Linux systems, this didn't work out of the box.</p>
]]></description>
            <content:encoded><![CDATA[<h2 id="for-the-last-few-years-at-my-workplace-we-ve-been-using-kerberos-authentication-to-connect-to-the-on-prem-sql-server-databases-on-windows-this-just-worked-like-magic-as-the-services-ran-as-a-windows-domain-user-and-so-could-connect-to-the-database-without-any-additional-configuration-however-when-moving-to-kubernetes-and-linux-systems-this-didn-t-work-out-of-the-box" tabindex="-1">For the last few years at my workplace we've been using Kerberos authentication to connect to the on-prem SQL Server databases. On Windows this just worked like magic, as the services ran as a Windows domain user and so could connect to the database without any additional configuration. However, when moving to Kubernetes and Linux systems, this didn't work out of the box. <a class="header-anchor" href="#for-the-last-few-years-at-my-workplace-we-ve-been-using-kerberos-authentication-to-connect-to-the-on-prem-sql-server-databases-on-windows-this-just-worked-like-magic-as-the-services-ran-as-a-windows-domain-user-and-so-could-connect-to-the-database-without-any-additional-configuration-however-when-moving-to-kubernetes-and-linux-systems-this-didn-t-work-out-of-the-box" aria-label="Permalink to &quot;For the last few years at my workplace we've been using Kerberos authentication to connect to the on-prem SQL Server databases. On Windows this just worked like magic, as the services ran as a Windows domain user and so could connect to the database without any additional configuration. However, when moving to Kubernetes and Linux systems, this didn't work out of the box.&quot;">&ZeroWidthSpace;</a></h2>
<p>Our initial solution was following this <a href="https://cloud.redhat.com/blog/kerberos-sidecar-container" target="_blank" rel="noreferrer">red hat blog post</a> which details how to setup a sidecar which keeps a kerberos token valid. This worked for a number of years but did have some problems:</p>
<ul>
<li>We ran 100+ containers and each needed a sidecar - this cost a few gigabytes of memory and some CPU allowance</li>
<li>When the token was being refreshed, it was not available for a few milliseconds</li>
<li>It was extra hassle and created slightly larger deployments and more complex Deployment configs.</li>
</ul>
<p>When investigating a seperate issue (dotnet 7 caused some transient kerberos faults) we realised that actually the whole sidecar approach was completely unneccessary! This post will give the minimum you actually need to call Keberos services from Linux</p>
<ol>
<li>You'll need to add the keberos tools to your docker image. Maybe you have a base image you share, maybe not. For alpine images:</li>
</ol>
<p><code>RUN apk add --no-cache krb5</code></p>
<ol start="2">
<li>You'll need to have a krb5 configuration that points to your domain controller. Microsoft has an <a href="https://learn.microsoft.com/en-us/sql/connect/jdbc/using-kerberos-integrated-authentication-to-connect-to-sql-server?view=sql-server-ver16#creating-a-kerberos-configuration-file" target="_blank" rel="noreferrer">example</a></li>
</ol>
<p>For example, ours looks like this:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">[logging]</span></span>
<span class="line"><span style="color: #A6ACCD">default</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">[libdefaults]</span></span>
<span class="line"><span style="color: #A6ACCD">...standard things here</span></span>
<span class="line"><span style="color: #A6ACCD">default_client_keytab_name=/krb5/client.keytab</span></span>
<span class="line"><span style="color: #A6ACCD">default_keytab_name=/krb5/krb5.keytab</span></span>
<span class="line"><span style="color: #A6ACCD">default_ccache_name=FILE:/dev/shm/ccache</span></span>
<span class="line"><span style="color: #A6ACCD">default_realm = EXAMPLE.COM</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">[realms]</span></span>
<span class="line"><span style="color: #A6ACCD">EXAMPLE.COM = {</span></span>
<span class="line"><span style="color: #A6ACCD">    kdc = ADS.EXAMPLE.COM:88</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
</div><p>You can then add this to the docker image like</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">RUN mkdir /krb5 &amp;&amp; mkdir /customkrb5</span></span>
<span class="line"><span style="color: #A6ACCD">COPY krb5.conf /customkrb5/krb5.conf</span></span>
<span class="line"><span style="color: #A6ACCD">ENV KRB5_CONFIG=/customkrb5/krb5.conf</span></span></code></pre>
</div><p>We put it in a custom folder as some container systems have the limitation that mounting a directory overrides all files in that directory (we'll do this later)</p>
<ol start="3">
<li>
<p>You then need a keytab added to the image. You will probably want this done at runtime. Get a keytab (maybe off your AD system administrators, maybe you create it yourself with ktutil) and make sure this ends up at /krb5/client.keytab. We use kubernetes secrets and volume mounts for this</p>
</li>
<li>
<p>Connect to the database using <code>Integrated Security=true</code>. This should now just work. You can check by calling <code>klist</code> inside the container to see that it has a ticket</p>
</li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TV7 (IPTV from Init7) with Dream Machine and Unity Dream machine]]></title>
            <link>https://brown.bg/posts/init7-tv7</link>
            <guid>https://brown.bg/posts/init7-tv7</guid>
            <pubDate>Fri, 04 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>If you're an Init7 TV customer and you want to use the Unify Dream Machine as your IPTV receiver, I figured it out for you! Here's a step-by-step guide to help you get started.</p>
]]></description>
            <content:encoded><![CDATA[<h2 id="if-you-re-an-init7-tv-customer-and-you-want-to-use-the-unify-dream-machine-as-your-iptv-receiver-i-figured-it-out-for-you-here-s-a-step-by-step-guide-to-help-you-get-started" tabindex="-1">If you're an Init7 TV customer and you want to use the Unify Dream Machine as your IPTV receiver, I figured it out for you! Here's a step-by-step guide to help you get started. <a class="header-anchor" href="#if-you-re-an-init7-tv-customer-and-you-want-to-use-the-unify-dream-machine-as-your-iptv-receiver-i-figured-it-out-for-you-here-s-a-step-by-step-guide-to-help-you-get-started" aria-label="Permalink to &quot;If you're an Init7 TV customer and you want to use the Unify Dream Machine as your IPTV receiver, I figured it out for you! Here's a step-by-step guide to help you get started.&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="step-1-update-to-the-newest-dream-machine" tabindex="-1">Step 1: Update to the Newest Dream Machine <a class="header-anchor" href="#step-1-update-to-the-newest-dream-machine" aria-label="Permalink to &quot;Step 1: Update to the Newest Dream Machine&quot;">&ZeroWidthSpace;</a></h2>
<p>Before you begin, make sure your Unify Dream Machine is updated to the latest firmware version. You can check for updates by logging into the Unify Dream Machine web interface and navigating to the &quot;Settings&quot; page.
Your version needs to be higher than <a href="https://community.ui.com/releases/UniFi-Network-Application-7-4-156/15ac6260-9cd1-4ac3-a91c-4880c1c87882" target="_blank" rel="noreferrer">&quot;UniFi Network Application 7.4.156&quot;</a>.</p>
<h2 id="step-2-enable-the-feature" tabindex="-1">Step 2: Enable the feature <a class="header-anchor" href="#step-2-enable-the-feature" aria-label="Permalink to &quot;Step 2: Enable the feature&quot;">&ZeroWidthSpace;</a></h2>
<p>You now have a new setup that you can do on the Network application:</p>
<p><img src="/images/network-iptv.png" alt="udpxy"></p>
<p>You can also see the <a href="https://help.ui.com/hc/en-us/articles/14957610078615-UniFi-Gateway-IGMP-Proxy-IPTV-#:~:text=How%20Does%20it%20Work%3F,box%20that%20receives%20the%20traffic." target="_blank" rel="noreferrer">basic unifi docs</a></p>
<p>You should now already be able to watch TV7 though VLC using this link: <a href="https://www.init7.net/en/support/faq/TV-andere-Geraete/" target="_blank" rel="noreferrer">https://www.init7.net/en/support/faq/TV-andere-Geraete/</a></p>
<p><img src="/images/vlc-tv7.png" alt="udpxy"></p>
<p>However, I wanted to watch on a Samsung TV and none of the apps supported these multicast IPTV streams. So, I had to:</p>
<h2 id="step-3-install-agrrh-udpxy" tabindex="-1">Step 3: Install agrrh-udpxy. <a class="header-anchor" href="#step-3-install-agrrh-udpxy" aria-label="Permalink to &quot;Step 3: Install agrrh-udpxy.&quot;">&ZeroWidthSpace;</a></h2>
<p>I installed this as a docker image on a syntology NAS.</p>
<p>The following settings worked for me:
image: agrrh/udpxy:latest
network: host
cmd: -v -T -p 4022</p>
<p>You can then go to your nas drive on port 4022, URL /status. For example mine is <a href="http://nasdrive:4022/status" target="_blank" rel="noreferrer">http://nasdrive:4022/status</a> and I see:</p>
<p><img src="/images/udpxy.png" alt="udpxy"></p>
<h2 id="step-4-create-your-own-playlist-that-forwards-to-your-udprxy-instance-instead-of-the-original-network-stream" tabindex="-1">Step 4: Create your own playlist that forwards to your udprxy instance instead of the original network stream <a class="header-anchor" href="#step-4-create-your-own-playlist-that-forwards-to-your-udprxy-instance-instead-of-the-original-network-stream" aria-label="Permalink to &quot;Step 4: Create your own playlist that forwards to your udprxy instance instead of the original network stream&quot;">&ZeroWidthSpace;</a></h2>
<p>You can do this by opening up the m3u file and relacing the URLs with the link to your local instance. For example, mine is here:
<a href="https://gist.github.com/evolvedlight/e9b2a0145840ba5385478a3075aa815a" target="_blank" rel="noreferrer">https://gist.github.com/evolvedlight/e9b2a0145840ba5385478a3075aa815a</a></p>
<h2 id="step-5-open-this-in-a-iptv-app" tabindex="-1">Step 5: Open this in a IPTV app. <a class="header-anchor" href="#step-5-open-this-in-a-iptv-app" aria-label="Permalink to &quot;Step 5: Open this in a IPTV app.&quot;">&ZeroWidthSpace;</a></h2>
<p>Personally I used one called &quot;m3u player&quot; but there are many out there. You'll then also be able to go to your udpxy status page and see the running stream there.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dockerless docker builds in Github Actions with Dotnet 7]]></title>
            <link>https://brown.bg/posts/github-actions-net7-docker</link>
            <guid>https://brown.bg/posts/github-actions-net7-docker</guid>
            <pubDate>Fri, 14 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>How to setup a github build action that uses the dockerless build in .Net 7</p>
]]></description>
            <content:encoded><![CDATA[<p>How to setup a github build action that uses the dockerless build in .Net 7</p>
<hr>
<h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">&ZeroWidthSpace;</a></h2>
<p>For me, one of the slowest parts of the fast build-test-deploy cycle was always waiting for docker builds to run. Especially with the practise of docker-in-docker builds which without special magic wouldn't cache anything, it could often take several minutes to create a docker application.
.Net 7 promises to offer an alternative to this for simple apps - let's take a dive in.</p>
<h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">&ZeroWidthSpace;</a></h3>
<p>You'll need .Net 7 for this, which isn't currently released at time of writing. However, in theory you can take a .Net 6 application and use the .Net 7 SDK to build it already, however YMMV.</p>
<p>With this installed, let's create a new app and get started! We're following along with <a href="https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/" target="_blank" rel="noreferrer">https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/</a> but with some changes</p>
<h3 id="basic-app" tabindex="-1">Basic app <a class="header-anchor" href="#basic-app" aria-label="Permalink to &quot;Basic app&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">dotnet</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">new</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">webapi</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">-o</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">dockerless-docker</span></span>
<span class="line"><span style="color: #82AAFF">cd</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">dockerless-docker</span></span></code></pre>
</div><p>We also need to do a couple of things: because .Net 7 isn't out yet, we need a globals file to tell the github actions to use it</p>
<p>That gives us our basic app - let's add a github actions build for it now, by adding the following:</p>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">sdk</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">&quot;</span><span style="color: #FFCB6B">version</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">7.0.100-rc.2.22477.23</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>We'll also need to add a reference to this tool:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">dotnet</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">add</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">package</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Microsoft.NET.Build.Containers</span></span></code></pre>
</div><p>Now, add a github actions to <code>.github/workflows/whatever.yml</code></p>
<div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Create and publish a Docker image</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FF9CAC">on</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">push</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">branches</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">*</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">pull_request</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">branches</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">main</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">env</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">REGISTRY</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">ghcr.io</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">IMAGE_NAME</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">${{ github.repository }}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">jobs</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">build-and-push-image</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">runs-on</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">ubuntu-latest</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">permissions</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">contents</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">read</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">packages</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">write</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">steps</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">uses</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">actions/checkout@v3</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Setup .NET SDK</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">uses</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">actions/setup-dotnet@v2</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic"># Package the app into a linux-x64 container based on the dotnet/aspnet image</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Publish</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">run</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">dotnet publish --os linux --arch x64 --configuration Release -p:PublishProfile=DefaultContainer</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Checkout repository</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">uses</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">actions/checkout@v3</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Login to GitHub Container Registry</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">uses</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">docker/login-action@v2</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">with</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #F07178">registry</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">ghcr.io</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #F07178">username</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">${{ github.actor }}</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #F07178">password</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Tag built container with Github thing</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">run</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">|</span></span>
<span class="line"><span style="color: #C3E88D">          docker tag dockerless-docker:1.0.0 ghcr.io/evolvedlight/dockerless-docker:1.0.0</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">Push built container to Github Package Repo</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">run</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">|</span></span>
<span class="line"><span style="color: #C3E88D">          docker push ghcr.io/evolvedlight/dockerless-docker:1.0.0</span></span></code></pre>
</div><p>Here's now where the weird bit comes - on github the process to get a repository seems rather backward. You need to assign permissions for the repo to write images, but there's no way to do that <em>until</em> you've pushed an image manually!</p>
<p>So let's go around the hoops - create the docker image locally, tag it, login to the Github repository and upload it:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">dotnet publish --os linux --arch x64 --configuration Release -p:PublishProfile=DefaultContainer</span></span>
<span class="line"><span style="color: #A6ACCD">docker tag dockerless-docker:1.0.0 ghcr.io/evolvedlight/dockerless-docker:1.0.0</span></span>
<span class="line"><span style="color: #A6ACCD">docker login ghcr.io -u &lt;your username&gt;</span></span></code></pre>
</div><p>Enter a Personal access token that you can create on your github profile page, and finally push the image:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">docker push ghcr.io/evolvedlight/dockerless-docker:1.0.0</span></span></code></pre>
</div><p>Now go to your packages page, for me that's <a href="https://github.com/evolvedlight?tab=packages" target="_blank" rel="noreferrer">https://github.com/evolvedlight?tab=packages</a>.
Click on the new package page that was created, and then go to the settings for it (for me <a href="https://github.com/users/evolvedlight/packages/container/dockerless-docker/settings" target="_blank" rel="noreferrer">https://github.com/users/evolvedlight/packages/container/dockerless-docker/settings</a>)</p>
<p>Under &quot;Manage Actions access&quot; add your repository with access.</p>
<p>In the end it'll look like this:</p>
<p><img src="/images/github_actions_permission.png" alt="github permissions"></p>
<p>Finally, rerun the action and it should work.</p>
<p>In the next blob post we'll look at fixing the above docker build to push with the right version numbers and tags</p>
]]></content:encoded>
        </item>
    </channel>
</rss>
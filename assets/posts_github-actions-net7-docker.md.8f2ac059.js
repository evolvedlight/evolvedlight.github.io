import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{y as a,x as s,I as t}from"./framework.4c5e7916.js";const e='{"title":"Dockerless docker builds in Github Actions with Dotnet 7","description":"","frontmatter":{"title":"Dockerless docker builds in Github Actions with Dotnet 7","date":"2022-10-14T00:00:00.000Z","author":"Stephen Brown","twitter":"@evolvedlight"},"headers":[{"level":2,"title":"Background","slug":"background"},{"level":3,"title":"Setup","slug":"setup"},{"level":3,"title":"Basic app","slug":"basic-app"}],"relativePath":"posts/github-actions-net7-docker.md","lastUpdated":1665840346926}',o={},p=[t('<p>How to setup a github build action that uses the dockerless build in .Net 7</p><hr><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-hidden="true">#</a></h2><p>For me, one of the slowest parts of the fast build-test-deploy cycle was always waiting for docker builds to run. Especially with the practise of docker-in-docker builds which without special magic wouldn&#39;t cache anything, it could often take several minutes to create a docker application. .Net 7 promises to offer an alternative to this for simple apps - let&#39;s take a dive in.</p><h3 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h3><p>You&#39;ll need .Net 7 for this, which isn&#39;t currently released at time of writing. However, in theory you can take a .Net 6 application and use the .Net 7 SDK to build it already, however YMMV.</p><p>With this installed, let&#39;s create a new app and get started! We&#39;re following along with <a href="https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/" target="_blank" rel="noopener noreferrer">https://devblogs.microsoft.com/dotnet/announcing-builtin-container-support-for-the-dotnet-sdk/</a> but with some changes</p><h3 id="basic-app" tabindex="-1">Basic app <a class="header-anchor" href="#basic-app" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code>dotnet new webapi -o dockerless-docker\n<span class="token builtin class-name">cd</span> dockerless-docker\n</code></pre></div><p>We also need to do a couple of things: because .Net 7 isn&#39;t out yet, we need a globals file to tell the github actions to use it</p><p>That gives us our basic app - let&#39;s add a github actions build for it now, by adding the following:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sdk&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7.0.100-rc.2.22477.23&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>We&#39;ll also need to add a reference to this tool:</p><div class="language-bash"><pre><code>dotnet <span class="token function">add</span> package Microsoft.NET.Build.Containers\n</code></pre></div><p>Now, add a github actions to <code>.github/workflows/whatever.yml</code></p><div class="language-yaml"><pre><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Create and publish a Docker image\n\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;*&quot;</span> <span class="token punctuation">]</span>\n  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;main&quot;</span> <span class="token punctuation">]</span>\n\n\n<span class="token key atrule">env</span><span class="token punctuation">:</span>\n  <span class="token key atrule">REGISTRY</span><span class="token punctuation">:</span> ghcr.io\n  <span class="token key atrule">IMAGE_NAME</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository <span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">build-and-push-image</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">permissions</span><span class="token punctuation">:</span>\n      <span class="token key atrule">contents</span><span class="token punctuation">:</span> read\n      <span class="token key atrule">packages</span><span class="token punctuation">:</span> write\n\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup .NET SDK\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>dotnet@v2\n      <span class="token comment"># Package the app into a linux-x64 container based on the dotnet/aspnet image</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet publish <span class="token punctuation">-</span><span class="token punctuation">-</span>os linux <span class="token punctuation">-</span><span class="token punctuation">-</span>arch x64 <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release <span class="token punctuation">-</span>p<span class="token punctuation">:</span>PublishProfile=DefaultContainer\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Login to GitHub Container Registry\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/login<span class="token punctuation">-</span>action@v2\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">registry</span><span class="token punctuation">:</span> ghcr.io\n          <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.actor <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Tag built container with Github thing\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          docker tag dockerless-docker:1.0.0 ghcr.io/evolvedlight/dockerless-docker:1.0.0</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push built container to Github Package Repo\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          docker push ghcr.io/evolvedlight/dockerless-docker:1.0.0</span>\n</code></pre></div><p>Here&#39;s now where the weird bit comes - on github the process to get a repository seems rather backward. You need to assign permissions for the repo to write images, but there&#39;s no way to do that <em>until</em> you&#39;ve pushed an image manually!</p><p>So let&#39;s go around the hoops - create the docker image locally, tag it, login to the Github repository and upload it:</p><div class="language-"><pre><code>dotnet publish --os linux --arch x64 --configuration Release -p:PublishProfile=DefaultContainer\ndocker tag dockerless-docker:1.0.0 ghcr.io/evolvedlight/dockerless-docker:1.0.0\ndocker login ghcr.io -u &lt;your username&gt;\n</code></pre></div><p>Enter a Personal access token that you can create on your github profile page, and finally push the image:</p><div class="language-"><pre><code>docker push ghcr.io/evolvedlight/dockerless-docker:1.0.0\n</code></pre></div><p>Now go to your packages page, for me that&#39;s <a href="https://github.com/evolvedlight?tab=packages" target="_blank" rel="noopener noreferrer">https://github.com/evolvedlight?tab=packages</a>. Click on the new package page that was created, and then go to the settings for it (for me <a href="https://github.com/users/evolvedlight/packages/container/dockerless-docker/settings" target="_blank" rel="noopener noreferrer">https://github.com/users/evolvedlight/packages/container/dockerless-docker/settings</a>)</p><p>Under &quot;Manage Actions access&quot; add your repository with access.</p><p>In the end it&#39;ll look like this:</p><p><img src="/images/github_actions_permission.png" alt="github permissions"></p><p>Finally, rerun the action and it should work.</p><p>In the next blob post we&#39;ll look at fixing the above docker build to push with the right version numbers and tags</p>',27)];var c=n(o,[["render",function(n,t,e,o,c,u){return s(),a("div",null,p)}]]);export{e as __pageData,c as default};
